// Enkel mappning mellan Guid och nummer f√∂r externa API:et
const productIdMap = new Map<string, number>();
let nextId = 1;

// Funktion f√∂r att h√§mta ID fr√•n Guid
export function getExternalApiId(productGuid: string): number {
  console.log('üîç getExternalApiId called with productGuid:', productGuid);

  if (!productIdMap.has(productGuid)) {
    console.log('üìù Guid not found in map, creating new mapping...');
    productIdMap.set(productGuid, nextId);
    console.log(`‚úÖ Mapped Guid "${productGuid}" to number ${nextId}`);
    nextId++;
  } else {
    console.log('üéØ Found existing mapping in cache');
  }

  const mappedId = productIdMap.get(productGuid)!;
  console.log(`üîÑ Returning mapped ID: ${mappedId} for Guid: ${productGuid}`);
  console.log('üìä Current mapping table:', Array.from(productIdMap.entries()));

  return mappedId;
}

// Funktion f√∂r att h√§mta Guid fr√•n ID
export function getProductGuid(externalId: number): string | undefined {
  console.log('üîç getProductGuid called with externalId:', externalId);

  for (const [guid, id] of productIdMap.entries()) {
    if (id === externalId) {
      console.log(`‚úÖ Found Guid "${guid}" for external ID ${externalId}`);
      return guid;
    }
  }

  console.log(`‚ùå No Guid found for external ID ${externalId}`);
  return undefined;
}

// Debug-funktion f√∂r att se hela mappningen
export function debugProductIdMap() {
  console.log('üó∫Ô∏è Complete Product ID Mapping:');
  console.table(
    Array.from(productIdMap.entries()).map(([guid, id]) => ({
      Guid: guid,
      ExternalId: id,
    }))
  );
}
